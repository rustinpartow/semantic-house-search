# Configuration Management

This rule covers configuration files and environment management across services.

## 1. Configuration File Types

### 1.1 Service Configuration (config.json)
Each service should have its own `config.json`:
```json
{
  "search_area": {
    "center": "San Francisco, CA",
    "radius_miles": 2.0,
    "auto_bounds": true
  },
  "filters": {
    "min_price": 1000000,
    "max_price": 2000000,
    "min_sqft": 1000,
    "max_sqft": 2000
  },
  "output": {
    "html_file": "search_results.html",
    "json_file": "search_data.json"
  }
}
```

### 1.2 Railway Configuration (railway.json)
Required for every Railway deployment:
```json
{
  "$schema": "https://railway.app/railway.schema.json",
  "build": {
    "builder": "NIXPACKS"
  },
  "deploy": {
    "startCommand": "python app.py",
    "healthcheckPath": "/health",
    "healthcheckTimeout": 100,
    "restartPolicyType": "ON_FAILURE",
    "restartPolicyMaxRetries": 10
  }
}
```

### 1.3 Python Requirements (requirements.txt)
Must include all dependencies with versions:
```
Flask==2.3.3
requests==2.31.0
beautifulsoup4==4.12.2
urllib3==2.0.7
Werkzeug==2.3.7
Jinja2==3.1.2
MarkupSafe==2.1.3
itsdangerous==2.1.2
click==8.1.7
blinker==1.6.3
```

## 2. Environment Variables

### 2.1 Required Variables
Every Railway deployment MUST have:
- `SECRET_KEY`: Secure random string for Flask sessions
- `FLASK_ENV`: Set to `production` for live deployments
- `PORT`: Automatically set by Railway

### 2.2 Service-Specific Variables
Add as needed for each service:
- API keys for external services
- Database connection strings
- Feature flags
- Custom configuration values

### 2.3 Security Best Practices
- Never commit secrets to git
- Use environment variables for sensitive data
- Generate secure SECRET_KEY values
- Rotate keys regularly

## 3. Configuration Loading

### 3.1 Flask App Configuration
```python
import os
from datetime import datetime

app = Flask(__name__)

# Load configuration from environment variables
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'dev-secret-key')
app.config['FLASK_ENV'] = os.environ.get('FLASK_ENV', 'development')

# Load service-specific configuration
def load_config():
    try:
        with open('config.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return DEFAULT_CONFIG
```

### 3.2 Environment-Specific Settings
```python
# Development vs Production settings
if os.environ.get('FLASK_ENV') == 'production':
    # Production settings
    app.config['DEBUG'] = False
    app.config['TESTING'] = False
else:
    # Development settings
    app.config['DEBUG'] = True
    app.config['TESTING'] = True
```

## 4. Configuration Validation

### 4.1 Required Fields Check
```python
def validate_config(config):
    required_fields = ['search_area', 'filters', 'output']
    for field in required_fields:
        if field not in config:
            raise ValueError(f"Missing required config field: {field}")
    return True
```

### 4.2 Type Validation
```python
def validate_types(config):
    if not isinstance(config['filters']['min_price'], (int, float)):
        raise ValueError("min_price must be a number")
    if not isinstance(config['search_area']['center'], str):
        raise ValueError("center must be a string")
    return True
```

## 5. Configuration Updates

### 5.1 Hot Reloading
For development, implement configuration reloading:
```python
import time
import os

def watch_config():
    """Watch for config file changes and reload"""
    last_modified = os.path.getmtime('config.json')
    while True:
        current_modified = os.path.getmtime('config.json')
        if current_modified > last_modified:
            reload_config()
            last_modified = current_modified
        time.sleep(1)
```

### 5.2 Configuration Versioning
Track configuration changes:
```python
def get_config_version():
    """Get configuration version for cache busting"""
    return os.path.getmtime('config.json')
```

## 6. Multi-Service Configuration

### 6.1 Shared Configuration
For common settings across services:
```python
# shared_config.py
SHARED_SETTINGS = {
    'api_timeout': 30,
    'max_retries': 3,
    'cache_ttl': 3600
}
```

### 6.2 Service-Specific Overrides
```python
# service_config.py
from shared_config import SHARED_SETTINGS

SERVICE_SPECIFIC = {
    'search_timeout': 60,  # Override shared timeout
    'custom_feature': True
}

CONFIG = {**SHARED_SETTINGS, **SERVICE_SPECIFIC}
```

## 7. Configuration Testing

### 7.1 Configuration Validation Tests
```python
def test_config_validation():
    """Test that configuration is valid"""
    config = load_config()
    assert validate_config(config)
    assert validate_types(config)
```

### 7.2 Environment Variable Tests
```python
def test_environment_variables():
    """Test that required environment variables are set"""
    assert os.environ.get('SECRET_KEY') is not None
    assert os.environ.get('FLASK_ENV') in ['development', 'production']
```