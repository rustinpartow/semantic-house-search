# Railway Build Verification

This rule covers how to verify Railway builds and catch deployment issues before manual checking.

## 1. MANDATORY: Build Verification Process

### 1.1 Before Every Push to GitHub
**ALWAYS run these commands to simulate Railway build locally:**

```bash
# 1. Test requirements.txt installation
pip install -r requirements.txt

# 2. Test Gunicorn start command
gunicorn app:app --host 0.0.0.0 --port 5000 --check-config

# 3. Test Flask app imports
python -c "from app import app; print('App imports successfully')"

# 4. Test health endpoint locally
python -c "
import requests
import subprocess
import time
import os

# Start app in background
proc = subprocess.Popen(['gunicorn', 'app:app', '--host', '0.0.0.0', '--port', '5000'])
time.sleep(3)

try:
    # Test health endpoint
    response = requests.get('http://localhost:5000/health')
    print(f'Health check: {response.status_code} - {response.json()}')
    
    # Test main page
    response = requests.get('http://localhost:5000/')
    print(f'Main page: {response.status_code}')
    
finally:
    proc.terminate()
"
```

### 1.2 Railway-Specific Verification
```bash
# Test with Railway environment variables
export PORT=5000
export SECRET_KEY="test-secret-key"
export FLASK_ENV="production"

# Test Gunicorn with Railway settings
gunicorn app:app --host 0.0.0.0 --port $PORT --check-config
```

## 2. Automated Build Testing

### 2.1 Create test_build.py
```python
#!/usr/bin/env python3
"""test_build.py - Automated Railway build verification"""

import subprocess
import sys
import time
import requests
import os
from pathlib import Path

def test_requirements():
    """Test that requirements.txt installs without errors"""
    print("Testing requirements.txt installation...")
    try:
        result = subprocess.run([
            sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'
        ], capture_output=True, text=True, check=True)
        print("‚úì Requirements install successfully")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚úó Requirements installation failed: {e.stderr}")
        return False

def test_gunicorn_config():
    """Test Gunicorn configuration"""
    print("Testing Gunicorn configuration...")
    try:
        result = subprocess.run([
            'gunicorn', 'app:app', '--check-config'
        ], capture_output=True, text=True, check=True)
        print("‚úì Gunicorn configuration is valid")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚úó Gunicorn configuration failed: {e.stderr}")
        return False

def test_app_imports():
    """Test that app imports without errors"""
    print("Testing app imports...")
    try:
        result = subprocess.run([
            sys.executable, '-c', 'from app import app; print("App imports successfully")'
        ], capture_output=True, text=True, check=True)
        print("‚úì App imports successfully")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚úó App import failed: {e.stderr}")
        return False

def test_health_endpoint():
    """Test health endpoint with Gunicorn"""
    print("Testing health endpoint...")
    
    # Set environment variables
    env = os.environ.copy()
    env['PORT'] = '5000'
    env['SECRET_KEY'] = 'test-secret-key'
    env['FLASK_ENV'] = 'production'
    
    # Start Gunicorn
    proc = subprocess.Popen([
        'gunicorn', 'app:app', '--host', '0.0.0.0', '--port', '5000'
    ], env=env)
    
    try:
        # Wait for server to start
        time.sleep(5)
        
        # Test health endpoint
        response = requests.get('http://localhost:5000/health', timeout=10)
        if response.status_code == 200:
            print("‚úì Health endpoint responds correctly")
            return True
        else:
            print(f"‚úó Health endpoint failed: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚úó Health endpoint test failed: {e}")
        return False
    finally:
        proc.terminate()

def main():
    """Run all build tests"""
    print("üöÄ Running Railway build verification tests...\n")
    
    tests = [
        test_requirements,
        test_gunicorn_config,
        test_app_imports,
        test_health_endpoint
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
        print()
    
    print(f"üìä Results: {passed}/{total} tests passed")
    
    if passed == total:
        print("‚úÖ All tests passed! Ready for Railway deployment.")
        return 0
    else:
        print("‚ùå Some tests failed. Fix issues before deploying.")
        return 1

if __name__ == '__main__':
    sys.exit(main())
```

### 2.2 Create Makefile for Easy Testing
```makefile
# Makefile for Railway build verification

.PHONY: test-build test-requirements test-gunicorn test-imports test-health deploy

test-build: test-requirements test-gunicorn test-imports test-health
	@echo "‚úÖ All build tests passed!"

test-requirements:
	@echo "Testing requirements.txt..."
	pip install -r requirements.txt

test-gunicorn:
	@echo "Testing Gunicorn configuration..."
	gunicorn app:app --check-config

test-imports:
	@echo "Testing app imports..."
	python -c "from app import app; print('App imports successfully')"

test-health:
	@echo "Testing health endpoint..."
	python test_build.py

deploy: test-build
	@echo "Running pre-deployment tests..."
	git add .
	git commit -m "Deploy: $(shell date)"
	git push origin main
	@echo "‚úÖ Deployed to Railway!"

# Quick test for development
test-quick:
	@echo "Running quick tests..."
	python -c "from app import app; print('‚úì App imports')"
	gunicorn app:app --check-config
	@echo "‚úÖ Quick tests passed!"
```

## 3. Pre-Deployment Checklist

### 3.1 MANDATORY: Run Before Every Push
```bash
# 1. Run build verification
make test-build

# 2. Check for common issues
python -c "
import sys
import os

# Check required files exist
required_files = ['app.py', 'requirements.txt', 'Procfile', 'railway.json']
for file in required_files:
    if not os.path.exists(file):
        print(f'‚ùå Missing required file: {file}')
        sys.exit(1)
    else:
        print(f'‚úÖ Found: {file}')

# Check requirements.txt has gunicorn
with open('requirements.txt', 'r') as f:
    if 'gunicorn' not in f.read():
        print('‚ùå Missing gunicorn in requirements.txt')
        sys.exit(1)
    else:
        print('‚úÖ Gunicorn found in requirements.txt')

print('‚úÖ All required files and dependencies present')
"
```

### 3.2 Environment Variable Testing
```bash
# Test with production environment variables
export PORT=5000
export SECRET_KEY="test-secret-key-$(date +%s)"
export FLASK_ENV="production"

# Test Gunicorn with production settings
gunicorn app:app --host 0.0.0.0 --port $PORT --check-config
```

## 4. Common Build Failure Patterns

### 4.1 Missing Dependencies
- **Symptom**: Import errors in build logs
- **Prevention**: Always test `pip install -r requirements.txt`
- **Fix**: Add missing packages to requirements.txt

### 4.2 Gunicorn Configuration Issues
- **Symptom**: "No module named app" or similar errors
- **Prevention**: Test `gunicorn app:app --check-config`
- **Fix**: Ensure app.py is in root directory

### 4.3 Port Binding Issues
- **Symptom**: Service starts but no domain generated
- **Prevention**: Test with `--host 0.0.0.0 --port $PORT`
- **Fix**: Ensure proper host/port binding

### 4.4 Environment Variable Issues
- **Symptom**: App crashes on startup
- **Prevention**: Test with production environment variables
- **Fix**: Ensure app handles missing environment variables

## 5. Automated Deployment Script

### 5.1 deploy.sh
```bash
#!/bin/bash
# deploy.sh - Automated Railway deployment with verification

set -e  # Exit on any error

echo "üöÄ Starting Railway deployment process..."

# 1. Run build verification
echo "üìã Running build verification tests..."
make test-build

# 2. Check git status
echo "üìã Checking git status..."
if [ -n "$(git status --porcelain)" ]; then
    echo "üìù Staging changes..."
    git add .
    git commit -m "Deploy: $(date)"
else
    echo "‚úÖ No changes to commit"
fi

# 3. Push to GitHub
echo "üì§ Pushing to GitHub..."
git push origin main

echo "‚úÖ Deployment initiated! Check Railway dashboard for build status."
echo "üîó Railway will automatically redeploy from GitHub."
```

## 6. Integration with Cursor Rules

### 6.1 Update Master Rule
Add to `00-master-rule.mdc`:
```markdown
**1.4: Build Verification (MANDATORY)**
- ALWAYS run `make test-build` before pushing to GitHub
- NEVER push without verifying Gunicorn configuration
- ALWAYS test health endpoint locally before deployment
- Use `deploy.sh` script for automated deployment
```

### 6.2 Update Railway Deployment Rule
Add to `01-railway-deployment.mdc`:
```markdown
## 7. Build Verification (MANDATORY)

### 7.1 Pre-Deployment Testing
```bash
# Run comprehensive build tests
make test-build

# Test with production environment
export PORT=5000 SECRET_KEY="test-key" FLASK_ENV="production"
gunicorn app:app --host 0.0.0.0 --port $PORT --check-config
```

### 7.2 Automated Deployment
```bash
# Use deployment script
./deploy.sh
```
```

## 7. Monitoring and Alerts

### 7.1 Build Status Monitoring
- Set up Railway webhooks to notify on build failures
- Use Railway API to check build status programmatically
- Implement health checks that verify deployment success

### 7.2 Error Pattern Recognition
- Monitor for common failure patterns
- Automatically retry failed deployments
- Alert on repeated failures